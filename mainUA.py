import requests
import datetime
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
from bs4 import BeautifulSoup
import logging


open_weather_token = "—Ç–æ–∫–µ–Ω openWeather"
tg_bot_token = "—Ç–æ–∫–µ–Ω –±–æ—Ç–∞"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=tg_bot_token)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start', 'help'])
async def welcome(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("‚õÖÔ∏è–ü–æ–≥–æ–¥–∞‚õÖÔ∏è"))
    markup.add(types.KeyboardButton("üí∞–ö—É—Ä—Å –≤–∞–ª—é—Çüí∞"))
    await message.answer("–û–±–µ—Ä–∏ –æ–¥–Ω—É –∑ —Ñ—É–Ω–∫—Ü—ñ–π –≤–Ω–∏–∑—É", reply_markup=markup)



#üí∞üí∑üí∂üí¥üíµ
@dp.message_handler(lambda message: message.text == "üí∞–ö—É—Ä—Å –≤–∞–ª—é—Çüí∞")
async def exchange_rates(message: types.Message):
    url="https://minfin.com.ua/ua/currency/"
    rs=requests.get(url)
    soup = BeautifulSoup(rs.text, 'lxml')
    nby = soup.find_all('span', class_='mfcur-nbu-full-wrap')
    buy = soup.find_all('td', class_='mfm-text-nowrap')
    sell = soup.find_all('td', class_='mfm-text-nowrap')
    await message.reply(f"\U0001F4B5 USD:\n –ù–ë–£: {nby[0].text[1:8]} –ö—É–ø—ñ–≤–ª—è: {buy[1].text[1:8]} –ü—Ä–æ–¥–∞–∂:{sell[1].text[14:20]}\n\n"
                        f"\U0001F4B6 EUR:\n –ù–ë–£: {nby[1].text[1:8]} –ö—É–ø—ñ–≤–ª—è: {buy[3].text[1:8]} –ü—Ä–æ–¥–∞–∂:{sell[3].text[14:20]}\n\n")



@dp.message_handler(lambda message: message.text == "‚õÖÔ∏è–ü–æ–≥–æ–¥–∞‚õÖÔ∏è")
async def name_city(message: types.Message):
    await message.reply("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞: ")

    @dp.message_handler(lambda message: message.text != "üí∞–ö—É—Ä—Å –≤–∞–ª—é—Çüí∞")
    async def get_weather(message: types.Message):
        code_to_smile = {
            "Clear": "–Ø—Å–Ω–æ \U00002600",
            "Clouds": "–•–º–∞—Ä–Ω–æ \U00002601",
            "Rain": "–î–æ—â  \U00002614",
            "Drizzle": "–î–æ—â  \U00002614",
            "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
            "Snow": "–°–Ω—ñ–≥ \U0001F328",
            "Mist": "–¢—É–º–∞–Ω \U0001F32B"
        }

        try:
            r = requests.get(
                f"http://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric"
            )
            data = r.json()

            city = data["name"]
            cur_weather = data["main"]["temp"]

            weather_description = data["weather"][0]["main"]
            if weather_description in code_to_smile:
                wd = code_to_smile[weather_description]
            else:
                wd = "ü§∑ –Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é, —è–∫–∞ —Ç–∞–º –ø–æ–≥–æ–¥–∞ ü§∑"

            humidity = data["main"]["humidity"]
            pressure = data["main"]["pressure"]
            wind = data["wind"]["speed"]
            sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
            sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
            length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(
                data["sys"]["sunrise"])

            await message.reply(f"***{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}***\n"
                f"–ü–æ–≥–æ–¥–∞ –≤ –º—ñ—Å—Ç—ñ: {city}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather}C¬∞ {wd}\n"
                f"–í–æ–ª–æ–≥—ñ—Å—Ç—å: {humidity}%\n–¢–∏—Å–∫: {pressure} –º–º.—Ä—Ç.—Å—Ç\n–í—ñ—Ç–µ—Ä: {wind} –º/—Å\n"
                f"–°—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {sunrise_timestamp}\n–∑–∞—Ö—ñ–¥ —Å–æ–Ω—Ü—è: {sunset_timestamp}\n–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n"
                f"***–ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!*** "
                )

        except:
            await message.reply("üîé–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æüîé")


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
